" vim encoding
if has('win32') || has ('win64')
  set encoding=cp932
  set termencoding=cp932
else
  set encoding=utf-8
  set termencoding=utf-8
endif

scriptencoding utf-8

" 一旦ファイルタイプ関連を無効化する
filetype off
filetype plugin indent off

" シンタックスハイライトを有効化
if !exists("g:syntax_on")
  syntax enable
endif

" vi 互換動作無効
if &compatible
  set nocompatible
endif

" runtimepath に このフォルダを追加
set runtimepath+=~/.dotfiles/vim

""""""""""
" encoding
""""""""""

" 書き込み encoding
set fileencoding=utf-8
" 読み込み encoding
set fileencodings=utf-8,cp932,sjis,euc-jp,iso-2022-jp

""""""""""
" 表示関連
""""""""""

set showcmd " 入力中のコマンド
set showmatch " 対応する括弧
set matchtime=1
set display=lastline "長い行の表示
set laststatus=2 " 常にステータスラインを表示

set number " 行番号
set list " 不可視文字
set listchars=tab:>\ ,trail:_
set cursorline " カーソル行
set colorcolumn=80 " 80 文字目
set showtabline=2 " 常にタブラインを表示
colorscheme koehler

""""""""""
" indent
""""""""""

set autoindent " 自動インデント

set tabstop=2 " タブ表示幅
set expandtab " タブを空白に展開
set softtabstop=2 " タブ展開幅
set shiftwidth=2 " 自動インデント幅
set smartindent " 高度な自動インデント

""""""""""
" move
""""""""""

" 矢印キーでバッファ移動
nnoremap <Left>  :<C-u>bprev<CR>
nnoremap <Right> :<C-u>bnext<CR>

" 最上部までスクロールした後１行目に戻る
noremap <expr> <C-b> max([winheight(0) - 2, 1]) . "\<C-u>" .
  \ (line('.') < 1 + winheight(0) ? 'H' : 'L')
" 最下部までスクロール時最終行が見えたら止まる
noremap <expr> <C-f> max([winheight(0) - 2, 1]) . "\<C-d>" .
  \ (line('.') > line('$') - winheight(0) ? 'L' : 'H')
" 最後までスクロールした後はカーソル移動
noremap <expr> <C-y> (line('w0') <= 1 ? 'k' : "\<C-y>")
noremap <expr> <C-e> (line('w$') >= line('$') ? 'j' : "\<C-e>")

""""""""""
" backups
""""""""""

set swapfile " スワップファイルを作る
set noundofile " アンドゥファイルを作らない

set backup " バックアップを残す
set backupdir=~/.vim/vimbackup

""""""""""
" viminfo
""""""""""

" viminfo ファイルに 1000 行までヤンクを保存
set viminfo+=\"1000
" viminfo ファイル出力先
set viminfo+=n~/.vim/viminfo

""""""""""
" 検索・置換
""""""""""

set incsearch " インクリメンタル検索
set wrapscan " 最後尾から先頭に戻る
set hlsearch " 検索結果をハイライト

""""""""""
" その他
""""""""""

set modeline " モードライン
set history=10000 " 入力コマンドの履歴保持数
set backspace=indent,eol,start " 挿入モードに入る前の文字を消せるようにする

" 全モードでマウス使用
if has('mouse')
  set mouse=a
endif
set hidden " 未保存でも別のファイルを開ける
set pumheight=10 " 補完メニュー高さ

" Y で行末までヤンク
nnoremap Y y$

" W / Q
command! -bar -nargs=* -complete=file -range=% -bang W
  \ <line1>,<line2>write<bang> <args>
command! -bar -nargs=* -complete=file -range=% -bang Write
  \ <line1>,<line2>write<bang> <args>
command! -bar -nargs=* -complete=file -range=% -bang Wq
  \ <line1>,<line2>write<bang> <args> | :Sayonara
command! -bar -nargs=* -complete=file -range=% -bang WQ
  \ <line1>,<line2>write<bang> <args> | :Sayonara

command! -bar -bang Wqall wqall<bang>
command! -bar -bang WQall wqall<bang>

command! -bar Q :Sayonara
command! -bar Quit :Sayonara
command! -bar -bang Qall qall<bang>

""""""""""
" windows 用
""""""""""

if has('win32') || has ('win64')
  behave mswin " windows ショートカット等を使えるようにする
  set iminsert=0 " 挿入モードと検索モードで IME オフ
  set imsearch=-1
endif

""""""""""
" dein
""""""""""

" dein の場所
let s:dein_dir = expand('~/.vim/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" プラグインを記述ファイルの場所
let s:toml_dir = expand('~/.dotfiles/vim/dein_toml')
let s:toml = s:toml_dir . '/dein.toml'
let s:lazy_toml = s:toml_dir . '/dein_lazy.toml'

" dein が runtimepath になければ追加，更に dein 本体がなければ git clone
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute "set runtimepath+=" . fnamemodify(s:dein_repo_dir, ':p')
endif

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  call dein#load_toml(s:toml, {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})
  call dein#end()
  call dein#save_state()
endif

""""""""""
" vim-lightline
" lightline-buffer
""""""""""

" lightline-buffer の設定
let g:lightline = {
\   'tabline': {
\     'left': [['bufferinfo'], ['bufferbefore', 'buffercurrent', 'bufferafter']],
\     'right': [],
\   },
\   'component_expand': {
\     'buffercurrent': 'lightline#buffer#buffercurrent2',
\   },
\   'component_type': {
\     'buffercurrent': 'tabsel',
\   },
\   'component_function': {
\     'bufferbefore': 'lightline#buffer#bufferbefore',
\     'bufferafter': 'lightline#buffer#bufferafter',
\   'bufferinfo': 'lightline#buffer#bufferinfo',
\   },
\ }

""""""""""
" vim-better-whitespace
""""""""""

" ファイル保存時に末尾空白を自動削除
autocmd BufEnter * EnableStripWhitespaceOnSave

""""""""""
" 末尾に置く設定
""""""""""

" ファイルタイプ関連を再び有効にする
filetype plugin indent on

" 未インストールのプラグインがあれば知らせる (dein)
if dein#check_install()
  call dein#install()
endif
